This project is based on a handmadehero.org project.
The videos are available on per-day basis, f.e. video from day 1 has url
   https://forums.handmadehero.org/jace/videos/win32-platform/day001.html

Day 001: display a message box

Day 002: opening a window
  - window content is alternating between white and black, when sizing it
  
Day 003: allocating a back buffer
  - close the app when close button is clicked
  - handle event: window size changed
  - create bitmap from scratch: 32-bit per pixel: RGB + alpha

Day 004: animating the back buffer
  - fill the entire back buffer with blue color
  - fill the entire back buffer with a weird gradient 256x256 pixels
    window resizing animates the weird gradient 
    
Day 005: Windows graphics review
  - code refactoring: encapsulate back buffer related code
  - create fixed size back buffer 1280x760 pixels
  
Day 006: gamepad and keyboard input
   (Win: discussed XInput API)
   (Win: discussed unresolved external symbols and dynamic dll loading
         by using LoadLibrary() and GetProcAddress())
  - setup key binding and handler for the 'Esc' key
  
Day 007: initializing DirectSound
  (Win: discussed DirectSound API, primary and secondary buffers)
  - nowadays audio is 48kHz, we'll use 2 sec audio buffer, 2 channels, 16 bit per sample
    note: in a buffer you have 16 bit for LEFT channel, and 16-bit for RIGHT channel,
          so that makes 4 bytes, or 32-bit per one sound sample
  - game loop implemented to do continuous rendering of weird gradient 

Day 008: writing a square wave sound
  (Win: discussed how to write a square wave to DirectSound)
  - generating square wave audio of given frequency (medium C tone) 

Day 009: variable pitch sine wave sound
  - square waves are harsh, so sine waves will be used instead to generate smoother sound
  - fixed point and floating point arithmetic explained
  - floating point arithmetic will be simulated by integer arithmetic
  - implemented sine wave sound 
  - pressing arrow up increases tone frequency, pressing arrow down decreases
  - introduced sound buffer latency: we no longer fill up the entire sound buffer (1sec latency)
    instead we fill it up to 1/15sec worth of data
    note: with 1sec latency, when pressing down/up arrows you need to wait up to 1sec
      to notice changes in tone frequency

Day 010: performance counters
  - (Win: discussed QueryPerformanceCounter, RDTSC, wsprintf, sprintf)
  - implemented frame timing, to determine fps (it was 400+ fps on 8 core intel core i7)
   
Day 011: basics of platform design
  - (Win: platform-specific code and cross-platform code are kept in separate files)
  
Day 012: platform-independent sound output
  - (Win: discuss memory allocations on stack (alloca))
  - (Win: allocate a big sound buffer at the beginning and fill up regions of this buffer
          as needed, to be written later to DirectSound buffers)
  - GameSound class is already using big Java-allocated sound buffer to be used by the game

Day 013: platform-independent user input
  - (C++: discussed function overloading)
  - implemented keyboard listener handling UP, DOWN, LEFT and RIGHT keys

Day 014: platform-independent game memory
  - (Win: preallocating two memory pools: permanent storage and transient storage)
  
Day 015: platform-independent debug file I/O
  - created GameAssets class that allows to read a file into memory, and write a file to disk

Day 016: VisualStudio compiler switches
  - (Win: discussed C/C++ compiler warnings, compiling 32-bit executable, name mangling)
  - keyboard mappings implemented: 
    up,down,left,right keys are mapped as up,down,left,right gamepad events
    Q - left shoulder, E - right shoulder

Day 017: unified keyboard and gamepad input

Day 018: enforcing a video frame rate
  - enforced a video frame rate of 30fps

Day 019: improving audio sync

Day 020: debugging the audio sync
  - implemented audio sync for low and high latency sound cards
  

  